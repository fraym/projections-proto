// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: management/projection_service.proto

package managementpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectionsServiceClient is the client API for ProjectionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectionsServiceClient interface {
	CreateProjections(ctx context.Context, in *CreateProjectionsRequest, opts ...grpc.CallOption) (*CreateProjectionsResponse, error)
	UpdateProjections(ctx context.Context, in *UpdateProjectionsRequest, opts ...grpc.CallOption) (*UpdateProjectionsResponse, error)
	RemoveProjections(ctx context.Context, in *RemoveProjectionsRequest, opts ...grpc.CallOption) (*RemoveProjectionsResponse, error)
	GetProjections(ctx context.Context, in *GetProjectionsRequest, opts ...grpc.CallOption) (*GetProjectionsResponse, error)
}

type projectionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectionsServiceClient(cc grpc.ClientConnInterface) ProjectionsServiceClient {
	return &projectionsServiceClient{cc}
}

func (c *projectionsServiceClient) CreateProjections(ctx context.Context, in *CreateProjectionsRequest, opts ...grpc.CallOption) (*CreateProjectionsResponse, error) {
	out := new(CreateProjectionsResponse)
	err := c.cc.Invoke(ctx, "/management.ProjectionsService/CreateProjections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionsServiceClient) UpdateProjections(ctx context.Context, in *UpdateProjectionsRequest, opts ...grpc.CallOption) (*UpdateProjectionsResponse, error) {
	out := new(UpdateProjectionsResponse)
	err := c.cc.Invoke(ctx, "/management.ProjectionsService/UpdateProjections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionsServiceClient) RemoveProjections(ctx context.Context, in *RemoveProjectionsRequest, opts ...grpc.CallOption) (*RemoveProjectionsResponse, error) {
	out := new(RemoveProjectionsResponse)
	err := c.cc.Invoke(ctx, "/management.ProjectionsService/RemoveProjections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionsServiceClient) GetProjections(ctx context.Context, in *GetProjectionsRequest, opts ...grpc.CallOption) (*GetProjectionsResponse, error) {
	out := new(GetProjectionsResponse)
	err := c.cc.Invoke(ctx, "/management.ProjectionsService/GetProjections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectionsServiceServer is the server API for ProjectionsService service.
// All implementations must embed UnimplementedProjectionsServiceServer
// for forward compatibility
type ProjectionsServiceServer interface {
	CreateProjections(context.Context, *CreateProjectionsRequest) (*CreateProjectionsResponse, error)
	UpdateProjections(context.Context, *UpdateProjectionsRequest) (*UpdateProjectionsResponse, error)
	RemoveProjections(context.Context, *RemoveProjectionsRequest) (*RemoveProjectionsResponse, error)
	GetProjections(context.Context, *GetProjectionsRequest) (*GetProjectionsResponse, error)
	mustEmbedUnimplementedProjectionsServiceServer()
}

// UnimplementedProjectionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectionsServiceServer struct {
}

func (UnimplementedProjectionsServiceServer) CreateProjections(context.Context, *CreateProjectionsRequest) (*CreateProjectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjections not implemented")
}
func (UnimplementedProjectionsServiceServer) UpdateProjections(context.Context, *UpdateProjectionsRequest) (*UpdateProjectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjections not implemented")
}
func (UnimplementedProjectionsServiceServer) RemoveProjections(context.Context, *RemoveProjectionsRequest) (*RemoveProjectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjections not implemented")
}
func (UnimplementedProjectionsServiceServer) GetProjections(context.Context, *GetProjectionsRequest) (*GetProjectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjections not implemented")
}
func (UnimplementedProjectionsServiceServer) mustEmbedUnimplementedProjectionsServiceServer() {}

// UnsafeProjectionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectionsServiceServer will
// result in compilation errors.
type UnsafeProjectionsServiceServer interface {
	mustEmbedUnimplementedProjectionsServiceServer()
}

func RegisterProjectionsServiceServer(s grpc.ServiceRegistrar, srv ProjectionsServiceServer) {
	s.RegisterService(&ProjectionsService_ServiceDesc, srv)
}

func _ProjectionsService_CreateProjections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionsServiceServer).CreateProjections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.ProjectionsService/CreateProjections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionsServiceServer).CreateProjections(ctx, req.(*CreateProjectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionsService_UpdateProjections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionsServiceServer).UpdateProjections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.ProjectionsService/UpdateProjections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionsServiceServer).UpdateProjections(ctx, req.(*UpdateProjectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionsService_RemoveProjections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionsServiceServer).RemoveProjections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.ProjectionsService/RemoveProjections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionsServiceServer).RemoveProjections(ctx, req.(*RemoveProjectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionsService_GetProjections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionsServiceServer).GetProjections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/management.ProjectionsService/GetProjections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionsServiceServer).GetProjections(ctx, req.(*GetProjectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectionsService_ServiceDesc is the grpc.ServiceDesc for ProjectionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.ProjectionsService",
	HandlerType: (*ProjectionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjections",
			Handler:    _ProjectionsService_CreateProjections_Handler,
		},
		{
			MethodName: "UpdateProjections",
			Handler:    _ProjectionsService_UpdateProjections_Handler,
		},
		{
			MethodName: "RemoveProjections",
			Handler:    _ProjectionsService_RemoveProjections_Handler,
		},
		{
			MethodName: "GetProjections",
			Handler:    _ProjectionsService_GetProjections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/projection_service.proto",
}
