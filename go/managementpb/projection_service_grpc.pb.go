// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: management/projection_service.proto

package managementpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectionsService_RegisterMigration_FullMethodName  = "/management.ProjectionsService/RegisterMigration"
	ProjectionsService_StartMigration_FullMethodName     = "/management.ProjectionsService/StartMigration"
	ProjectionsService_FinishMigration_FullMethodName    = "/management.ProjectionsService/FinishMigration"
	ProjectionsService_RollbackMigration_FullMethodName  = "/management.ProjectionsService/RollbackMigration"
	ProjectionsService_GetMigrationStatus_FullMethodName = "/management.ProjectionsService/GetMigrationStatus"
	ProjectionsService_DataTransformation_FullMethodName = "/management.ProjectionsService/DataTransformation"
)

// ProjectionsServiceClient is the client API for ProjectionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectionsServiceClient interface {
	RegisterMigration(ctx context.Context, in *RegisterMigrationRequest, opts ...grpc.CallOption) (*RegisterMigrationResponse, error)
	StartMigration(ctx context.Context, in *StartMigrationRequest, opts ...grpc.CallOption) (*StartMigrationResponse, error)
	FinishMigration(ctx context.Context, in *FinishMigrationRequest, opts ...grpc.CallOption) (*FinishMigrationResponse, error)
	RollbackMigration(ctx context.Context, in *RollbackMigrationRequest, opts ...grpc.CallOption) (*RollbackMigrationResponse, error)
	GetMigrationStatus(ctx context.Context, in *GetMigrationStatusRequest, opts ...grpc.CallOption) (*GetMigrationStatusResponse, error)
	DataTransformation(ctx context.Context, opts ...grpc.CallOption) (ProjectionsService_DataTransformationClient, error)
}

type projectionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectionsServiceClient(cc grpc.ClientConnInterface) ProjectionsServiceClient {
	return &projectionsServiceClient{cc}
}

func (c *projectionsServiceClient) RegisterMigration(ctx context.Context, in *RegisterMigrationRequest, opts ...grpc.CallOption) (*RegisterMigrationResponse, error) {
	out := new(RegisterMigrationResponse)
	err := c.cc.Invoke(ctx, ProjectionsService_RegisterMigration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionsServiceClient) StartMigration(ctx context.Context, in *StartMigrationRequest, opts ...grpc.CallOption) (*StartMigrationResponse, error) {
	out := new(StartMigrationResponse)
	err := c.cc.Invoke(ctx, ProjectionsService_StartMigration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionsServiceClient) FinishMigration(ctx context.Context, in *FinishMigrationRequest, opts ...grpc.CallOption) (*FinishMigrationResponse, error) {
	out := new(FinishMigrationResponse)
	err := c.cc.Invoke(ctx, ProjectionsService_FinishMigration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionsServiceClient) RollbackMigration(ctx context.Context, in *RollbackMigrationRequest, opts ...grpc.CallOption) (*RollbackMigrationResponse, error) {
	out := new(RollbackMigrationResponse)
	err := c.cc.Invoke(ctx, ProjectionsService_RollbackMigration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionsServiceClient) GetMigrationStatus(ctx context.Context, in *GetMigrationStatusRequest, opts ...grpc.CallOption) (*GetMigrationStatusResponse, error) {
	out := new(GetMigrationStatusResponse)
	err := c.cc.Invoke(ctx, ProjectionsService_GetMigrationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectionsServiceClient) DataTransformation(ctx context.Context, opts ...grpc.CallOption) (ProjectionsService_DataTransformationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProjectionsService_ServiceDesc.Streams[0], ProjectionsService_DataTransformation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &projectionsServiceDataTransformationClient{stream}
	return x, nil
}

type ProjectionsService_DataTransformationClient interface {
	Send(*DataTransformationRequest) error
	Recv() (*DataToTransform, error)
	grpc.ClientStream
}

type projectionsServiceDataTransformationClient struct {
	grpc.ClientStream
}

func (x *projectionsServiceDataTransformationClient) Send(m *DataTransformationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *projectionsServiceDataTransformationClient) Recv() (*DataToTransform, error) {
	m := new(DataToTransform)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProjectionsServiceServer is the server API for ProjectionsService service.
// All implementations must embed UnimplementedProjectionsServiceServer
// for forward compatibility
type ProjectionsServiceServer interface {
	RegisterMigration(context.Context, *RegisterMigrationRequest) (*RegisterMigrationResponse, error)
	StartMigration(context.Context, *StartMigrationRequest) (*StartMigrationResponse, error)
	FinishMigration(context.Context, *FinishMigrationRequest) (*FinishMigrationResponse, error)
	RollbackMigration(context.Context, *RollbackMigrationRequest) (*RollbackMigrationResponse, error)
	GetMigrationStatus(context.Context, *GetMigrationStatusRequest) (*GetMigrationStatusResponse, error)
	DataTransformation(ProjectionsService_DataTransformationServer) error
	mustEmbedUnimplementedProjectionsServiceServer()
}

// UnimplementedProjectionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectionsServiceServer struct {
}

func (UnimplementedProjectionsServiceServer) RegisterMigration(context.Context, *RegisterMigrationRequest) (*RegisterMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMigration not implemented")
}
func (UnimplementedProjectionsServiceServer) StartMigration(context.Context, *StartMigrationRequest) (*StartMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMigration not implemented")
}
func (UnimplementedProjectionsServiceServer) FinishMigration(context.Context, *FinishMigrationRequest) (*FinishMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishMigration not implemented")
}
func (UnimplementedProjectionsServiceServer) RollbackMigration(context.Context, *RollbackMigrationRequest) (*RollbackMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackMigration not implemented")
}
func (UnimplementedProjectionsServiceServer) GetMigrationStatus(context.Context, *GetMigrationStatusRequest) (*GetMigrationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMigrationStatus not implemented")
}
func (UnimplementedProjectionsServiceServer) DataTransformation(ProjectionsService_DataTransformationServer) error {
	return status.Errorf(codes.Unimplemented, "method DataTransformation not implemented")
}
func (UnimplementedProjectionsServiceServer) mustEmbedUnimplementedProjectionsServiceServer() {}

// UnsafeProjectionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectionsServiceServer will
// result in compilation errors.
type UnsafeProjectionsServiceServer interface {
	mustEmbedUnimplementedProjectionsServiceServer()
}

func RegisterProjectionsServiceServer(s grpc.ServiceRegistrar, srv ProjectionsServiceServer) {
	s.RegisterService(&ProjectionsService_ServiceDesc, srv)
}

func _ProjectionsService_RegisterMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionsServiceServer).RegisterMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectionsService_RegisterMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionsServiceServer).RegisterMigration(ctx, req.(*RegisterMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionsService_StartMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionsServiceServer).StartMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectionsService_StartMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionsServiceServer).StartMigration(ctx, req.(*StartMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionsService_FinishMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionsServiceServer).FinishMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectionsService_FinishMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionsServiceServer).FinishMigration(ctx, req.(*FinishMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionsService_RollbackMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionsServiceServer).RollbackMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectionsService_RollbackMigration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionsServiceServer).RollbackMigration(ctx, req.(*RollbackMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionsService_GetMigrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMigrationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectionsServiceServer).GetMigrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectionsService_GetMigrationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectionsServiceServer).GetMigrationStatus(ctx, req.(*GetMigrationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectionsService_DataTransformation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProjectionsServiceServer).DataTransformation(&projectionsServiceDataTransformationServer{stream})
}

type ProjectionsService_DataTransformationServer interface {
	Send(*DataToTransform) error
	Recv() (*DataTransformationRequest, error)
	grpc.ServerStream
}

type projectionsServiceDataTransformationServer struct {
	grpc.ServerStream
}

func (x *projectionsServiceDataTransformationServer) Send(m *DataToTransform) error {
	return x.ServerStream.SendMsg(m)
}

func (x *projectionsServiceDataTransformationServer) Recv() (*DataTransformationRequest, error) {
	m := new(DataTransformationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProjectionsService_ServiceDesc is the grpc.ServiceDesc for ProjectionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.ProjectionsService",
	HandlerType: (*ProjectionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMigration",
			Handler:    _ProjectionsService_RegisterMigration_Handler,
		},
		{
			MethodName: "StartMigration",
			Handler:    _ProjectionsService_StartMigration_Handler,
		},
		{
			MethodName: "FinishMigration",
			Handler:    _ProjectionsService_FinishMigration_Handler,
		},
		{
			MethodName: "RollbackMigration",
			Handler:    _ProjectionsService_RollbackMigration_Handler,
		},
		{
			MethodName: "GetMigrationStatus",
			Handler:    _ProjectionsService_GetMigrationStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataTransformation",
			Handler:       _ProjectionsService_DataTransformation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "management/projection_service.proto",
}
